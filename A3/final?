.data
msg1: .asciiz "\nPlease input an integer value greater than or equal to  0: "
errorMsg: .asciiz "The value you entered is less than zero. This program only works with values greater than or equal to zero."
inputMsg: .asciiz "Your input: "
factorialRes: .asciiz "\nThe factorial is: "
restartMsg: .asciiz "\n Would you like to do this again (Y/N): "

.text
main:
    li $v0, 4            # print the string
    la $a0, msg1         # from the address linked to msg1 (So print msg1)
    syscall              # call function
    
    li $v0, 5            # read the integer
    syscall              # call function
    
    move $a0, $v0        # move the result in $v0 to $a0
    bltz $a0, displayErrorMsg # if $a0 is less than  0 then go to displayErrorMsg
    
    jal factorial        # jump & connect to the factorial function


    move $s0, $v0        # Move the result of the factorial calculation to $s0


    li $v0, 4            # print string
    la $a0, inputMsg     # the inputMsg
    syscall              # call function
    
    move $a0, $s0        # moving $v0 to $a0
    li $v0, 1            # prints the integer
    syscall              # calling function
       
    li $v0, 4            # print the string
    la $a0, factorialRes # specifically "The factorial is: " sentence    
    syscall              # calling function
    
    move $a0, $s0        # moving $v0 to $a0
    li $v0, 1            # print integer
    syscall              # call function


    li $v0, 4		# asking for retry
    la $a0, restartMsg	# print "Would you like to... "
    syscall
    
    li $v0, 12		# read a single char
    syscall
    
    li $t1, 'Y'
    bne $v0, $t1, exit	# if not 'Y', exit
    j main		# if 'Y' start over

displayErrorMsg:   
    li $v0, 4            # print the string
    la $a0, errorMsg     # from the address linked with errorMsg
    syscall              # call function
    
    li $v0, 10           # exit code
    syscall              # call function

exit: 
    li $v0, 10		# exit program
    syscall
   
.text
.globl factorial

# int factorial(int n)
# Argument: n is passed in $a0
# Return value: result in $v1
factorial:
    addi $sp, $sp, -8   # Allocate stack space for 2 items (return address and the argument)
    sw $ra, 4($sp)      # Save the return address on the stack
    sw $a1, 0($sp)      # Save the current value of n on the stack

    # Base case: if n <= 1, return 1
    li $v0, 1           # Initialize return value to 1 (factorial(0) and factorial(1))
    blez $a1, end_factorial # If n <= 0, skip the recursion and return 1 immediately

    # Recursive case: factorial(n) = n * factorial(n-1)
    addi $a1, $a1, -1   # Decrement n
    jal factorial       # Recursive call factorial(n-1)

    # After returning from the recursive call, multiply n by the result of factorial(n-1)
    lw $a1, 0($sp)      # Restore the decremented n
    mul $v1, $a1, $v1   # Multiply n (restored to original value) by factorial(n-1)

end_factorial:
    lw $ra, 4($sp)      # Restore the return address
    addi $sp, $sp, 8    # Deallocate stack space
    jr $ra              # Return to caller
